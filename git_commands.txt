1) git branch- This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository.
2) git clean- Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files.
3) git config- A convenient way to set configuration options for your Git installation. Youâ€™ll typically only need to use this immediately after installing Git on a new development machine.
4) git fetch- Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project.
5) git pull- Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. This is the Git equivalent of svn update.
6) git rebase- Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore.
7) git reflog- Git keeps track of updates to the tip of branches using a mechanism called reflog. This allows you to go back to changesets even though they are not referenced by any branch or tag.
8) git remote- A convenient tool for administering remote connections. Instead of passing the full URL to the fetch, pull, and push commands, it lets you use a more meaningful shortcut.
9) git reset- Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository.
10) git revert- Undoes a committed snapshot. When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base.
THIS LINE IS ADDED TO CREATE MERGE CONFLICT
